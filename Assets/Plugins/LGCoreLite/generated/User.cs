//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace LGCoreLite {

/// <summary>
/// <c>User</c> is model class that defines basic user information.
/// </summary>
public class User : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal User(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(User obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~User() {
    Dispose();
  }

  /// <summary>
  /// Releases all resource used by the <see cref="LGCoreLite.User"/> object.
  /// </summary>
  /// <remarks>Call <see cref="Dispose"/> when you are finished using the <see cref="LGCoreLite.User"/>. The
  /// <see cref="Dispose"/> method leaves the <see cref="LGCoreLite.User"/> in an unusable state. After calling
  /// <see cref="Dispose"/>, you must release all references to the <see cref="LGCoreLite.User"/> so the garbage
  /// collector can reclaim the memory that the <see cref="LGCoreLite.User"/> was occupying.</remarks>
  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LGCoreLitePINVOKE.delete_User(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  /// <summary>
  /// Initializes a new instance of the <see cref="LGCoreLite.User"/> class.
  /// </summary>
  public User() : this(LGCoreLitePINVOKE.new_User__SWIG_0(), true) {
  }

  /// <summary>
  /// Initializes a new instance of the <see cref="LGCoreLite.User"/> class by copying <paramref name="rhs"/>.
  /// </summary>
  /// <param name="rhs">A existing instance of the <see cref="LGCoreLite.User"/> class as copy source.</param>
  public User(User rhs) : this(LGCoreLitePINVOKE.new_User__SWIG_1(User.getCPtr(rhs)), true) {
    if (LGCoreLitePINVOKE.SWIGPendingException.Pending) throw LGCoreLitePINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Create a new instance of the <see cref="LGCoreLite.User"/> class by copying <paramref name="rhs"/>.
  /// </summary>
  /// <returns>A new instance of the <see cref="LGCoreLite.User"/> class, which is a copy of <paramref name="rhs"/>.</returns>
  /// <param name="rhs">A existing instance of the <see cref="LGCoreLite.User"/> class as copy source.</param>
  public User CopyData(User rhs) {
    User ret = new User(LGCoreLitePINVOKE.User_CopyData(swigCPtr, User.getCPtr(rhs)), false);
    if (LGCoreLitePINVOKE.SWIGPendingException.Pending) throw LGCoreLitePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Gets the user identifier.
  /// </summary>
  /// <returns>The user identifier.</returns>
  public string getUserId() {
    string ret = LGCoreLitePINVOKE.User_getUserId(swigCPtr);
    return ret;
  }

  /// <summary>
  /// Sets the user identifier.
  /// </summary>
  /// <param name="value">The user identifier to set.</param>
  public void setUserId(string value) {
    LGCoreLitePINVOKE.User_setUserId(swigCPtr, value);
    if (LGCoreLitePINVOKE.SWIGPendingException.Pending) throw LGCoreLitePINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Gets the display name.
  /// </summary>
  /// <returns>The display name.</returns>
  public string getDisplayName() {
    string ret = LGCoreLitePINVOKE.User_getDisplayName(swigCPtr);
    return ret;
  }

  /// <summary>
  /// Sets the display name.
  /// </summary>
  /// <param name="value">The display name to set.</param>
  public void setDisplayName(string value) {
    LGCoreLitePINVOKE.User_setDisplayName(swigCPtr, value);
    if (LGCoreLitePINVOKE.SWIGPendingException.Pending) throw LGCoreLitePINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Gets the picture URL.
  /// </summary>
  /// <returns>The picture URL.</returns>
  public string getPictureUrl() {
    string ret = LGCoreLitePINVOKE.User_getPictureUrl(swigCPtr);
    return ret;
  }

  /// <summary>
  /// Sets the picture URL.
  /// </summary>
  /// <param name="value">The picture URL to set.</param>
  public void setPictureUrl(string value) {
    LGCoreLitePINVOKE.User_setPictureUrl(swigCPtr, value);
    if (LGCoreLitePINVOKE.SWIGPendingException.Pending) throw LGCoreLitePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
