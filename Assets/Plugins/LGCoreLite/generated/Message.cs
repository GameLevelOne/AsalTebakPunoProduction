//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace LGCoreLite {

/// <summary>
/// <c>Message</c> defines model of LINE message which could be sent by <see cref="LGCoreLite.LGCoreLiteAPI.sendMessage(LGCoreLite.StringList,LGCoreLite.Message,LGCoreLite.LGCoreLiteAPI.SendMessageDelegate)"/>.
/// </summary>
public class Message : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Message(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Message obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Message() {
    Dispose();
  }

  /// <summary>
  /// Releases all resource used by the <see cref="LGCoreLite.Message"/> object.
  /// </summary>
  /// <remarks>Call <see cref="Dispose"/> when you are finished using the <see cref="LGCoreLite.Message"/>. The
  /// <see cref="Dispose"/> method leaves the <see cref="LGCoreLite.Message"/> in an unusable state. After calling
  /// <see cref="Dispose"/>, you must release all references to the <see cref="LGCoreLite.Message"/> so the garbage
  /// collector can reclaim the memory that the <see cref="LGCoreLite.Message"/> was occupying.</remarks>
  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LGCoreLitePINVOKE.delete_Message(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  /// <summary>
  /// Initializes a new instance of the <see cref="LGCoreLite.Message"/> class.
  /// </summary>
  public Message() : this(LGCoreLitePINVOKE.new_Message__SWIG_0(), true) {
  }

  /// <summary>
  /// Initializes a new instance of the <see cref="LGCoreLite.Message"/> class.
  /// </summary>
  public Message(Message rhs) : this(LGCoreLitePINVOKE.new_Message__SWIG_1(Message.getCPtr(rhs)), true) {
    if (LGCoreLitePINVOKE.SWIGPendingException.Pending) throw LGCoreLitePINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Gets the identifier of message template that registered in "LINE Developer Center".
  /// </summary>
  /// <returns>The message template identifier.</returns>
  public string getTemplateId() {
    string ret = LGCoreLitePINVOKE.Message_getTemplateId(swigCPtr);
    return ret;
  }

  /// <summary>
  /// Sets the identifier of message template that registered in "LINE Developer Center".
  /// </summary>
  /// <param name="value">The identifier of message template that registered in "LINE Developer Center".</param>
  /// <remarks>
  /// The registered template with this identifier defines format of <c>Message</c>.
  /// The contents of <c>Message</c> should be set according this format using <see cref="setMainText"/>, <see cref="setSubText"/>, <see cref="setAltText"/>, <see cref="setLinkText"/> .
  /// </remarks>
  public void setTemplateId(string value) {
    LGCoreLitePINVOKE.Message_setTemplateId(swigCPtr, value);
    if (LGCoreLitePINVOKE.SWIGPendingException.Pending) throw LGCoreLitePINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Gets the message main text map by reference.
  /// </summary>
  /// <returns>The main text map of message.</returns>
  public StringStringMap mainText() {
    StringStringMap ret = new StringStringMap(LGCoreLitePINVOKE.Message_mainText(swigCPtr), false);
    return ret;
  }

  /// <summary>
  /// Gets the message main text map by value copy.
  /// </summary>
  /// <returns>The main text map of message.</returns>
  public StringStringMap getMainText() {
    StringStringMap ret = new StringStringMap(LGCoreLitePINVOKE.Message_getMainText(swigCPtr), false);
    return ret;
  }

  /// <summary>
  /// Sets the main text of message.
  /// </summary>
  /// <remarks>
  /// The keys of <paramref name="value"/> should be defined by the template designated by <see cref="setTemplateId"/>.
  /// </remarks>
  /// <param name="value">The main text of message to be set.</param>
  public void setMainText(StringStringMap value) {
    LGCoreLitePINVOKE.Message_setMainText(swigCPtr, StringStringMap.getCPtr(value));
    if (LGCoreLitePINVOKE.SWIGPendingException.Pending) throw LGCoreLitePINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Gets the message sub text map by reference.
  /// </summary>
  /// <returns>The sub text map of message.</returns>
  public StringStringMap subText() {
    StringStringMap ret = new StringStringMap(LGCoreLitePINVOKE.Message_subText(swigCPtr), false);
    return ret;
  }

  /// <summary>
  /// Gets the message sub text map by value copy.
  /// </summary>
  /// <returns>The sub text map of message.</returns>
  public StringStringMap getSubText() {
    StringStringMap ret = new StringStringMap(LGCoreLitePINVOKE.Message_getSubText(swigCPtr), false);
    return ret;
  }

  /// <summary>
  /// Sets the sub text of message.
  /// </summary>
  /// <remarks>
  /// The keys of <paramref name="value"/> should be defined by the template designated by <see cref="setTemplateId"/>.
  /// </remarks>
  /// <param name="value">The sub text of message to be set.</param>
  public void setSubText(StringStringMap value) {
    LGCoreLitePINVOKE.Message_setSubText(swigCPtr, StringStringMap.getCPtr(value));
    if (LGCoreLitePINVOKE.SWIGPendingException.Pending) throw LGCoreLitePINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Gets the message alternative text map by reference.
  /// </summary>
  /// <returns>The alternative text map of message.</returns>
  public StringStringMap altText() {
    StringStringMap ret = new StringStringMap(LGCoreLitePINVOKE.Message_altText(swigCPtr), false);
    return ret;
  }

  /// <summary>
  /// Gets the message alternative text map by value copy.
  /// </summary>
  /// <returns>The alternative text map of message.</returns>
  public StringStringMap getAltText() {
    StringStringMap ret = new StringStringMap(LGCoreLitePINVOKE.Message_getAltText(swigCPtr), false);
    return ret;
  }

  /// <summary>
  /// Sets the alternative text of message.
  /// </summary>
  /// <remarks>
  /// The keys of <paramref name="value"/> should be defined by the template designated by <see cref="setTemplateId"/>.
  /// </remarks>
  /// <param name="value">The alternative text of message to be set.</param>
  public void setAltText(StringStringMap value) {
    LGCoreLitePINVOKE.Message_setAltText(swigCPtr, StringStringMap.getCPtr(value));
    if (LGCoreLitePINVOKE.SWIGPendingException.Pending) throw LGCoreLitePINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Gets the message link text map by reference.
  /// </summary>
  /// <returns>The link text map of message.</returns>
  public StringStringMap linkText() {
    StringStringMap ret = new StringStringMap(LGCoreLitePINVOKE.Message_linkText(swigCPtr), false);
    return ret;
  }

  /// <summary>
  /// Gets the message link text map by value copy.
  /// </summary>
  /// <returns>The link text map of message.</returns>
  public StringStringMap getLinkText() {
    StringStringMap ret = new StringStringMap(LGCoreLitePINVOKE.Message_getLinkText(swigCPtr), false);
    return ret;
  }

  /// <summary>
  /// Sets the link text of message.
  /// </summary>
  /// <remarks>
  /// The keys of <paramref name="value"/> should be defined by the template designated by <see cref="setTemplateId"/>.
  /// </remarks>
  /// <param name="value">The link text of message to be set.</param>
  public void setLinkText(StringStringMap value) {
    LGCoreLitePINVOKE.Message_setLinkText(swigCPtr, StringStringMap.getCPtr(value));
    if (LGCoreLitePINVOKE.SWIGPendingException.Pending) throw LGCoreLitePINVOKE.SWIGPendingException.Retrieve();
  }

  public StringStringMap getILinkUriParams() {
    StringStringMap ret = new StringStringMap(LGCoreLitePINVOKE.Message_getILinkUriParams(swigCPtr), false);
    return ret;
  }

  /// <summary>
  /// Dictionary to specify placeholders of Iphone Link Uri in message template
  /// </summary>
  /// <param name="value">The Dictionary of parameters to be set.</param>
  public void setILinkUriParams(StringStringMap value) {
    LGCoreLitePINVOKE.Message_setILinkUriParams(swigCPtr, StringStringMap.getCPtr(value));
    if (LGCoreLitePINVOKE.SWIGPendingException.Pending) throw LGCoreLitePINVOKE.SWIGPendingException.Retrieve();
  }

  public StringStringMap getALinkUriParams() {
    StringStringMap ret = new StringStringMap(LGCoreLitePINVOKE.Message_getALinkUriParams(swigCPtr), false);
    return ret;
  }

  /// <summary>
  /// Dictionary to specify placeholders of Android Link Uri in message template
  /// </summary>
  /// <param name="value">The Dictionary of parameters to be set.</param>
  public void setALinkUriParams(StringStringMap value) {
    LGCoreLitePINVOKE.Message_setALinkUriParams(swigCPtr, StringStringMap.getCPtr(value));
    if (LGCoreLitePINVOKE.SWIGPendingException.Pending) throw LGCoreLitePINVOKE.SWIGPendingException.Retrieve();
  }

  public StringStringMap getLinkUriParams() {
    StringStringMap ret = new StringStringMap(LGCoreLitePINVOKE.Message_getLinkUriParams(swigCPtr), false);
    return ret;
  }

  /// <summary>
  /// Dictionary to specify placeholders of Web Link Uri in message template, not used for native apps
  /// </summary>
  /// <param name="value">The Dictionary of parameters to be set.</param>
  public void setLinkUriParams(StringStringMap value) {
    LGCoreLitePINVOKE.Message_setLinkUriParams(swigCPtr, StringStringMap.getCPtr(value));
    if (LGCoreLitePINVOKE.SWIGPendingException.Pending) throw LGCoreLitePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
