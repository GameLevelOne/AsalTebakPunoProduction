//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace LGCoreLite {

    /// <summary>
    /// <c>Error</c> Defines error occured inside LGCoreLite SDK.
    /// </summary>
public class Error : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Error(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(Error obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~Error() {
    Dispose();
  }

    /// <summary>
    /// Releases all resource used by the <see cref="LGCoreLite.Error"/> object.
    /// </summary>
    /// <remarks>Call <see cref="Dispose"/> when you are finished using the <see cref="LGCoreLite.Error"/>. The
    /// <see cref="Dispose"/> method leaves the <see cref="LGCoreLite.Error"/> in an unusable state. After calling
    /// <see cref="Dispose"/>, you must release all references to the <see cref="LGCoreLite.Error"/> so the garbage
    /// collector can reclaim the memory that the <see cref="LGCoreLite.Error"/> was occupying.</remarks>
  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LGCoreLitePINVOKE.delete_Error(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

    /// <summary>
    /// Initializes a new instance of the <see cref="LGCoreLite.Error"/> class.
    /// </summary>
  public Error() : this(LGCoreLitePINVOKE.new_Error__SWIG_0(), true) {
  }

    /// <summary>
    /// Initializes a new instance of the <see cref="LGCoreLite.Error"/> class.
    /// </summary>
  public Error(Error rhs) : this(LGCoreLitePINVOKE.new_Error__SWIG_1(Error.getCPtr(rhs)), true) {
    if (LGCoreLitePINVOKE.SWIGPendingException.Pending) throw LGCoreLitePINVOKE.SWIGPendingException.Retrieve();
  }

    /// <summary>
    /// Gets the error code.
    /// </summary>
    /// <returns>The error code.</returns>
  public Error.ErrorCode getCode() {
    Error.ErrorCode ret = (Error.ErrorCode)LGCoreLitePINVOKE.Error_getCode(swigCPtr);
    return ret;
  }

    /// <summary>
    /// Sets the error code.
    /// </summary>
    /// <param name="code">Error code to set.</param>
  public void setCode(int code) {
    LGCoreLitePINVOKE.Error_setCode(swigCPtr, code);
  }

    /// <summary>
    /// Gets the error message.
    /// </summary>
    /// <returns>The error message.</returns>
  public string getMessage() {
    string ret = System.Runtime.InteropServices.Marshal.PtrToStringAnsi(LGCoreLitePINVOKE.Error_getMessage(swigCPtr));
    return ret;
}

    /// <summary>
    /// Sets the error message.
    /// </summary>
    /// <param name="message">Error message to set.</param>
  public void setMessage(string message) {
    LGCoreLitePINVOKE.Error_setMessage(swigCPtr, message);
    if (LGCoreLitePINVOKE.SWIGPendingException.Pending) throw LGCoreLitePINVOKE.SWIGPendingException.Retrieve();
  }

    /// <summary>
    /// Error code
    /// </summary>
  public enum ErrorCode {
    EC_NONE = 0,
    EC_INTERNAL_ERROR = 1,
    EC_INVALID_INPUT_PARAM = 2,
    EC_LOGIN_DETECTED_CHEAT = 11,
    EC_LOGIN_CANCEL = 12,
    EC_LOGIN_PROFILE_ERROR = 13,
    EC_LOGIN_DETECTED_APP_MODIFICATION = 15,
    EC_LOGIN_DETECTED_BLUESTACK = 16,
    EC_LOGIN_WEB_AUTH_FAIL = 17,
    EC_EXPIRED_ACCESS_TOKEN = 21,
    EC_NOT_EXIST_ACCESS_TOKEN = 22,
    EC_CHANNEL_API_FAIL = 31,
    EC_PLATFORM_MISSING_CONFIGURATION = 41,
    EC_PLATFORM_AUTHORIZATION_AGENT_NOT_AVAILABLE = 42,
    EC_PLATFORM_INTERNAL_INCONSISTENCY = 43,
    EC_PLATFORM_INVALID_SERVER_RESPONSE = 44,
    EC_PLATFORM_AUTHORIZATION_FAILED = 46,
    EC_UNKNOWN = -1
  }

}

}
