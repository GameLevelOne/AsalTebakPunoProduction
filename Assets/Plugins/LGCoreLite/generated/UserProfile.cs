//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace LGCoreLite {

/// <summary>
/// <c>UserProfile</c> is model class that defines user profile.
/// </summary>
public class UserProfile : User {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;

  internal UserProfile(global::System.IntPtr cPtr, bool cMemoryOwn) : base(LGCoreLitePINVOKE.UserProfile_SWIGUpcast(cPtr), cMemoryOwn) {
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(UserProfile obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~UserProfile() {
    Dispose();
  }

  /// <summary>
  /// Releases all resource used by the <see cref="LGCoreLite.UserProfile"/> object.
  /// </summary>
  /// <remarks>Call <see cref="Dispose"/> when you are finished using the <see cref="LGCoreLite.UserProfile"/>. The
  /// <see cref="Dispose"/> method leaves the <see cref="LGCoreLite.UserProfile"/> in an unusable state. After calling
  /// <see cref="Dispose"/>, you must release all references to the <see cref="LGCoreLite.UserProfile"/> so the garbage
  /// collector can reclaim the memory that the <see cref="LGCoreLite.UserProfile"/> was occupying.</remarks>
  public override void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          LGCoreLitePINVOKE.delete_UserProfile(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
      base.Dispose();
    }
  }

  /// <summary>
  /// Initializes a new instance of the <see cref="LGCoreLite.UserProfile"/> class.
  /// </summary>
  public UserProfile() : this(LGCoreLitePINVOKE.new_UserProfile__SWIG_0(), true) {
  }

  /// <summary>
  /// Initializes a new instance of the <see cref="LGCoreLite.UserProfile"/> class by copying <paramref name="rhs"/>.
  /// </summary>
  /// <param name="rhs">A existing instance of the <see cref="LGCoreLite.UserProfile"/> class as copy source.</param>
  public UserProfile(UserProfile rhs) : this(LGCoreLitePINVOKE.new_UserProfile__SWIG_1(UserProfile.getCPtr(rhs)), true) {
    if (LGCoreLitePINVOKE.SWIGPendingException.Pending) throw LGCoreLitePINVOKE.SWIGPendingException.Retrieve();
  }

  /// <summary>
  /// Create a new instance of the <see cref="LGCoreLite.UserProfile"/> class by copying <paramref name="rhs"/>.
  /// </summary>
  /// <returns>A new instance of the <see cref="LGCoreLite.UserProfile"/> class, which is a copy of <paramref name="rhs"/>.</returns>
  /// <param name="rhs">A existing instance of the <see cref="LGCoreLite.UserProfile"/> class as copy source.</param>
  public UserProfile CopyData(UserProfile rhs) {
    UserProfile ret = new UserProfile(LGCoreLitePINVOKE.UserProfile_CopyData(swigCPtr, UserProfile.getCPtr(rhs)), false);
    if (LGCoreLitePINVOKE.SWIGPendingException.Pending) throw LGCoreLitePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  /// <summary>
  /// Gets the status message.
  /// </summary>
  /// <returns>The status message.</returns>
  public string getStatusMessage() {
    string ret = LGCoreLitePINVOKE.UserProfile_getStatusMessage(swigCPtr);
    return ret;
  }

  /// <summary>
  /// Sets the status message.
  /// </summary>
  /// <param name="value">The status message to set.</param>
  public void setStatusMessage(string value) {
    LGCoreLitePINVOKE.UserProfile_setStatusMessage(swigCPtr, value);
    if (LGCoreLitePINVOKE.SWIGPendingException.Pending) throw LGCoreLitePINVOKE.SWIGPendingException.Retrieve();
  }

}

}
