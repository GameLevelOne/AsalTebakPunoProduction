//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace LGCoreLite {

    
    /// <summary>
    /// <c>LGCoreLiteAPI</c> provides API for LINE integration with the API and delegates that are necessary to use LINE features such as LINE Login, Link Message, Social Graph features, and security compromise detection.
    /// </summary>
    /// <remarks>
    /// <c>LGCoreLiteAPI</c> has a singleton native unmanaged instance created by <see cref="LGCoreLite.LGCoreLiteAPIFactory.createInstance"/> and access from everywhere by <see cref="LGCoreLite.LGCoreLiteAPIFactory.getInstance"/>.
    /// </remarks>
public class LGCoreLiteAPI : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LGCoreLiteAPI(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LGCoreLiteAPI obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

    /// <summary>
    /// Releases all resource used by the <see cref="LGCoreLite.LGCoreLiteAPI"/> object.
    /// </summary>
    /// <remarks>Call <see cref="Dispose"/> when you are finished using the <see cref="LGCoreLite.LGCoreLiteAPI"/>. The
    /// <see cref="Dispose"/> method leaves the <see cref="LGCoreLite.LGCoreLiteAPI"/> in an unusable state. After calling
    /// <see cref="Dispose"/>, you must release all references to the <see cref="LGCoreLite.LGCoreLiteAPI"/> so the
    /// garbage collector can reclaim the memory that the <see cref="LGCoreLite.LGCoreLiteAPI"/> was occupying.</remarks>
  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  /// <summary>
  /// The version of LGCoreLite Unity SDK
  /// </summary>
  /// <remarks>
  /// Format: "LGCoreLite [UnitySDK version]-[Native interop version]-[Android version]-[iOS version]"
  /// </remarks>
  public const string version = "LGCoreLite v2.5.0-v2.5-v2.5.0-v2.5.0";

  private static int                       _callbackContextId = 0;
  private static System.Collections.Generic.Dictionary<int, System.Delegate> _pendingCallbacks  = new System.Collections.Generic.Dictionary<int, System.Delegate>();
  private static object                    _callbacksLock     = new object();

    /// <summary>
    /// Initialize <c>LGCoreLite</c> instance with the specified appId, logLevel and timeoutInterval.
    /// </summary>
    /// <param name="appId">App identifier.</param>
    /// <param name="logLevel">Log level.</param>
    /// <param name="phase">Development phase, set to REAL before release</param>
    /// <param name="timeoutInterval">Timeout interval.</param>
    public LGCInitState init( string appId, LGCLogLevel logLevel, LGCPhase phase, int timeoutInterval )
    {
        LGCoreLiteExt.Init();
        // init callbacks
        setOnRetryLogin( _onRetryLoginDelegate );
        setOnLoginResult( _onLoginResultDelegate );

        return initialize( appId, logLevel, phase, timeoutInterval );
    }


    /// <summary>
    /// Delegate to handle retry of login.
    /// </summary>
    public delegate void RetryLoginDelegate();

    /// <summary>
    /// <see cref="OnRetryLogin"/> will be called when current authentication has become invalid.
    /// </summary>
    /// <remarks>
    /// Default <see cref="OnRetryLogin"/> is null. Add custom <see cref="RetryLoginDelegate"/> which call <see cref="login"/> for re-login before initialization of LGCoreLite.
    /// </remarks>
    /// <example>
    /// <para>
    /// <code>
    /// 	LGCoreLite.LGCoreLiteAPI instance = LGCoreLite.LGCoreLiteAPIFactory.createInstance();
    /// 
    /// 	LGCoreLite.LGCoreLiteAPI.OnRetryLogin = () => {
    /// 	    Debug.Log( "LGCoreLite.LGCoreLiteAPI.OnRetryLogin" );
    /// 	    instance.login();
    /// 	};
    /// 	
    /// 	...
    /// 	
    /// 	LGCoreLite.LGCInitState state = instance.init( appId, logLevel, timeoutInterval );
    /// </code>
    /// </para>
    /// </example>
    public static RetryLoginDelegate OnRetryLogin = null;

    internal delegate void onRetryLoginDelegate(
           global::System.IntPtr corePtr // global::LGCoreLite.LGCoreLiteAPI
        );
        [AOT.MonoPInvokeCallback (typeof (onRetryLoginDelegate))]
        static void _onRetryLoginDelegate(
           global::System.IntPtr corePtr // global::LGCoreLite.LGCoreLiteAPI
        )
        {
            if( OnRetryLogin != null ) {
                LGCoreLiteExt.Post( () => {
                    OnRetryLogin();
                    });
            }
        }


    
    /// <summary>
    /// Delegate to handle the result of <see cref="login"/>.
    /// </summary>
    /// <param name="loginState">Result state of login.</param>
    /// <param name="authInfo">Auth result data and user profile data if <paramref name="loginState"/> is <c>LGCoreLite.LGCLoginState.LGCLoginStateSuccess</c>, otherwise null.</param>
    /// <param name="error">Error occured during <see cref="login"/> if <paramref name="loginState"/> isn't <c>LGCoreLite.LGCLoginState.LGCLoginStateSuccess</c>, otherwise null.</param>
    public delegate void LoginResultDelegate( LGCLoginState loginState, UserAuth authInfo, Error error );
    
    /// <summary>
    /// <see cref="OnLoginResult"/> will be called after <see cref="login"/> called.
    /// </summary>
    /// <remarks>
    /// Default <see cref="OnLoginResult"/> is null. Add custom <see cref="LoginResultDelegate"/> before initialization of LGCoreLite to handle the result of <see cref="login"/>.
    /// Note: the login callback is not guaranteed to be called.
    /// </remarks>
    /// <example>
    /// <para>
    /// <code>
    /// 	LGCoreLite.LGCoreLiteAPI instance = LGCoreLite.LGCoreLiteAPIFactory.createInstance();
    /// 	
    /// 	LGCoreLite.LGCoreLiteAPI.OnLoginResult = ( LGCoreLite.LGCLoginState loginState, LGCoreLite.UserAuth authInfo, LGCoreLite.Error error ) => {
    /// 	    Debug.Log( "LGCoreLite.LGCoreLiteAPI.OnLoginResult: " + loginState );
    /// 	    if( loginState == LGCoreLite.LGCLoginState.LGCLoginStateSuccess ) {
    /// 	        Debug.Log( "LGCoreLite.LGCoreLiteAPI.login succeeded:" );
    /// 	        Debug.Log( "access token: " + authInfo.getAccessToken() );
    /// 	        Debug.Log( "profile: {\n"
    /// 	                  + "\t" + authInfo.getUserProfile().getUserId() + ",\n"
    /// 	                  + "\t" + authInfo.getUserProfile().getDisplayName() + ",\n"
    /// 	                  + "\t" + authInfo.getUserProfile().getPictureUrl() + ",\n"
    /// 	                  + "\t" + authInfo.getUserProfile().getStatusMessage() + "\n"
    /// 	                  + "}" );
    /// 	    }
    /// 	    else {
    /// 	        Debug.Log( "LGCoreLite.LGCoreLiteAPI.login failed:" );
    /// 	        Debug.Log( "Error[" + error.getCode() + "]: " + error.getMessage() );
    /// 	    }
    /// 	};
    /// 	
    /// 	...
    /// 	
    /// 	LGCoreLite.LGCInitState state = instance.init( appId, logLevel, timeoutInterval );
    /// </code>
    /// </para>
    /// </example>
    public static LoginResultDelegate OnLoginResult = null;

    internal delegate void onLoginResultDelegate(
          global::System.IntPtr corePtr,     // global::LGCoreLite.LGCoreLiteAPI
          int                   loginState,  // global::LGCoreLite.LGCLoginState
          global::System.IntPtr userAuthPtr, // global::LGCoreLite.UserAuth
          global::System.IntPtr errorPtr     // global::LGCoreLite.Error
    );
    [AOT.MonoPInvokeCallback (typeof (onLoginResultDelegate))]
    static void _onLoginResultDelegate(
        global::System.IntPtr corePtr,     // global::LGCoreLite.LGCoreLiteAPI
        int                   loginState,  // global::LGCoreLite.LGCLoginState
        global::System.IntPtr userAuthPtr, // global::LGCoreLite.UserAuth
        global::System.IntPtr errorPtr     // global::LGCoreLite.Error
    )
    {
        if( OnLoginResult != null )
                {
                    UserAuth userAuth = (userAuthPtr != global::System.IntPtr.Zero ? new UserAuth(new UserAuth(userAuthPtr, false)) : null);
                    Error    error    = (errorPtr != global::System.IntPtr.Zero ? new Error(new Error(errorPtr, false)) : null);

                    LGCoreLiteExt.Post( () => {
                        {
                            OnLoginResult( (LGCLoginState)loginState, userAuth, error );
                        }
                    }
                    );
                }
    }

    
    /// <summary>
    /// Gets the profile of current login user.
    /// </summary>
    /// <remarks>
    /// User must complete <see cref="login"/> before <see cref="getUserProfile(GetUserProfileDelegate)"/>.
    /// <seealso cref="login"/>
    /// </remarks>
    /// <param name="callback"><see cref="GetUserProfileDelegate"/> to handle the result of <see cref="getUserProfile(GetUserProfileDelegate)"/>.</param>
    /// <example>
    /// <para>
    /// <code>
    /// 	LGCoreLite.LGCoreLiteAPI instance = LGCoreLite.LGCoreLiteAPIFactory.getInstance();
    /// 	if( instance != null ) {
    /// 	    Debug.Log( "Fetching User Profile..." );
    /// 	    instance.getUserProfile( (
    /// 	        bool                     isSuccess,
    /// 	        LGCoreLite.UserProfile   myProfile,
    /// 	        LGCoreLite.Error         error ) =>
    /// 	    {
    /// 	        Debug.Log( "LGCoreLite.LGCoreLiteAPI.getUserProfile callback: " + isSuccess );
    /// 	        if( isSuccess ) {
    /// 	          Debug.Log( "profile: {\n"
    /// 	                    + "\t" + myProfile.getUserId() + ",\n"
    /// 	                    + "\t" + myProfile.getDisplayName() + ",\n"
    /// 	                    + "\t" + myProfile.getPictureUrl() + ",\n"
    /// 	                    + "\t" + myProfile.getStatusMessage() + "\n"
    /// 	                    + "}" );
    /// 	        }
    /// 	        else {
    /// 	            Debug.Log( "Error[" + error.getCode() + "]: " + error.getMessage() );
    /// 	        }
    /// 	    } );
    /// 	}
    /// </code>
    /// </para>
    /// </example>
  public void getUserProfile( GetUserProfileDelegate callback )
  {
    int contextId;
    lock( _callbacksLock ) {
        contextId = (_callbackContextId++);
        _pendingCallbacks.Add( contextId, callback );
    }

    getUserProfile(
        _getUserProfileCallback,
        new global::System.IntPtr(contextId)
    );
  }
    
    /// <summary>
    /// Delegate to handle the result of <see cref="getUserProfile(GetUserProfileDelegate)"/>.
    /// </summary>
    /// <param name="isSuccess"><c>true</c> if <see cref="getNotice"/> finished successfuly, otherwise <c>false</c>.</param>
    /// <param name="myProfile">The profile of current login user if <paramref name="isSuccess"/> is <c>true</c>, otherwise null.</param>
    /// <param name="error">Error occured during <see cref="getUserProfile(GetUserProfileDelegate)"/> if <paramref name="isSuccess"/> is <c>false</c>, otherwise null.</param>
  public delegate void GetUserProfileDelegate(
     bool          isSuccess,
     UserProfile   myProfile,
     Error         error
  );

    internal delegate void GetUserProfileCallbackDelegate(
         bool                         isSuccess,
         global::System.IntPtr        profilePtr,
         global::System.IntPtr        errorPtr,
         global::System.IntPtr        context
      );
      [AOT.MonoPInvokeCallback (typeof (GetUserProfileCallbackDelegate))]
      static void _getUserProfileCallback(
         bool                         isSuccess,
         global::System.IntPtr        profilePtr,
         global::System.IntPtr        errorPtr,
         global::System.IntPtr        context
      )
      {
        UserProfile myProfile = (profilePtr != global::System.IntPtr.Zero ? new UserProfile( new UserProfile(profilePtr, false) ) : null);
        Error       error     = (errorPtr != global::System.IntPtr.Zero ? new Error( new Error(errorPtr, false) ) : null);
        int contextId = context.ToInt32();
        if( _pendingCallbacks.ContainsKey(contextId) ) {
            UnityEngine.Debug.Log( "getUserProfile callback about to invoke!" );
            try {
                GetUserProfileDelegate callback = (GetUserProfileDelegate)_pendingCallbacks[contextId];

                        LGCoreLiteExt.Post( () => {
                            {
                                callback( isSuccess, myProfile, error );
                            }
                        });

            }
            catch( System.Exception e ) {
                UnityEngine.Debug.Log( e.Message );
            }
            UnityEngine.Debug.Log( "getUserProfile callback finished invoking!" );
            _pendingCallbacks.Remove( contextId );
        }
      }

    
    /// <summary>
    /// Gets the LINE friends of current login user.
    /// </summary>
    /// <remarks>
    /// User must complete <see cref="login"/> before <see cref="getUserFriends(int,int,GetUsersDelegate)"/>.
    /// <seealso cref="login"/>
    /// </remarks>
    /// <param name="offset">The index of first friend to fetch. This index starts from 1.</param>
    /// <param name="limit">The number of friends to fetch. This value should be greater or equal to 1, and less or equal to 500.</param>
    /// <param name="callback"><see cref="GetUsersDelegate"/> to handle the result of <see cref="getUserFriends(int,int,GetUsersDelegate)"/>.</param>
    /// <example>
    /// <para>
    /// <code>
    /// 	LGCoreLite.LGCoreLiteAPI instance = LGCoreLite.LGCoreLiteAPIFactory.getInstance();
    /// 	if( instance != null ) {
    /// 	    Debug.Log( "Get User Friends [1, 20]" );
    /// 	    instance.getUserFriends( 1, 20, (
    /// 	        bool                                isSuccess,
    /// 	        int                                 offset,
    /// 	        int                                 limit,
    /// 	        int                                 total,
    /// 	        LGCoreLite.UserProfileList          userProfileList,
    /// 	        LGCoreLite.Error                    error ) =>
    /// 	    {
    /// 	        Debug.Log( "LGCoreLite.LGCoreLiteAPI.getUserFriends callback: " + isSuccess );
    /// 	        if( isSuccess ) {
    /// 	            Debug.Log( "[" + offset + ", " + limit + ", " + total + "]" );
    /// 	            Debug.Log( "user profile list: [\n" );
    /// 	            foreach( UserProfile profile in userProfileList ) {
    /// 	                Debug.Log( "\t{\n"
    /// 	                          + "\t\t" + profile.getUserId() + ",\n"
    /// 	                          + "\t\t" + profile.getDisplayName() + ",\n"
    /// 	                          + "\t\t" + profile.getPictureUrl() + ",\n"
    /// 	                          + "\t\t" + profile.getStatusMessage() + "\n"
    /// 	                          + "\t},\n" );
    /// 	            }
    /// 	            Debug.Log( "]" );
    /// 	        }
    /// 	        else {
    /// 	            Debug.Log( "Error[" + error.getCode() + "]: " + error.getMessage() );
    /// 	        }
    /// 	    } );
    /// 	}
    /// </code>
    /// </para>
    /// </example>
  public void getUserFriends( int offset, int limit, GetUsersDelegate callback )
  {
    int contextId;
    lock( _callbacksLock ) {
        contextId = (_callbackContextId++);
        _pendingCallbacks.Add( contextId, callback );
    }

    getUserFriends(
        offset,
        limit,
        _getUsersCallback,
        new global::System.IntPtr(contextId)
    );
  }


    
    /// <summary>
    /// Gets the game friends of current login user.
    /// </summary>
    /// <remarks>
    /// User must complete <see cref="login"/> before <see cref="getGameFriends(int,int,GetUsersDelegate)"/>.
    /// <seealso cref="login"/>
    /// </remarks>
    /// <param name="offset">The index of first friend to fetch. This index starts from 1.</param>
    /// <param name="limit">The number of friends to fetch. This value should be greater or equal to 1, and less or equal to 500.</param>
    /// <param name="callback"><see cref="GetUsersDelegate"/> to handle the result of <see cref="getGameFriends(int,int,GetUsersDelegate)"/>.</param>
    /// <example>
    /// <para>
    /// <code>
    /// 	LGCoreLite.LGCoreLiteAPI instance = LGCoreLite.LGCoreLiteAPIFactory.getInstance();
    /// 	if( instance != null ) {
    /// 	    Debug.Log( "Get Game Friends [1, 20]" );
    /// 	    instance.getGameFriends( 1, 20, (
    /// 	        bool                                isSuccess,
    /// 	        int                                 offset,
    /// 	        int                                 limit,
    /// 	        int                                 total,
    /// 	        LGCoreLite.UserProfileList          userProfileList,
    /// 	        LGCoreLite.Error                    error ) =>
    /// 	    {
    /// 	        Debug.Log( "LGCoreLite.LGCoreLiteAPI.getGameFriends callback: " + isSuccess );
    /// 	        if( isSuccess ) {
    /// 	            Debug.Log( "[" + offset + ", " + limit + ", " + total + "]" );
    /// 	            Debug.Log( "user profile list: [\n" );
    /// 	            foreach( UserProfile profile in userProfileList ) {
    /// 	                Debug.Log( "\t{\n"
    /// 	                           + "\t\t" + profile.getUserId() + ",\n"
    /// 	                           + "\t\t" + profile.getDisplayName() + ",\n"
    /// 	                           + "\t\t" + profile.getPictureUrl() + ",\n"
    /// 	                           + "\t\t" + profile.getStatusMessage() + "\n"
    /// 	                           + "\t},\n" );
    /// 	            }
    /// 	            Debug.Log( "]" );
    /// 	        }
    /// 	        else {
    /// 	            Debug.Log( "Error[" + error.getCode() + "]: " + error.getMessage() );
    /// 	        }
    /// 	    } );
    /// 	}
    /// </code>
    /// </para>
    /// </example>
  public void getGameFriends( int offset, int limit, GetUsersDelegate callback )
  {
    int contextId;
    lock( _callbacksLock ) {
        contextId = (_callbackContextId++);
        _pendingCallbacks.Add( contextId, callback );
    }

    getGameFriends(
        offset,
        limit,
        _getUsersCallback,
        new global::System.IntPtr(contextId)
    );
  }


    /// <summary>
    /// Gets the profiles of designated users whose MID are in <paramref name="userIdList"/>.
    /// </summary>
    /// <remarks>
    /// User must complete <see cref="login"/> before <see cref="getProfiles"/>.
    /// <seealso cref="login"/>
    /// </remarks>
    /// <param name="userIdList">The MID list of users to fetech.</param>
    /// <param name="callback"><see cref="GetUsersDelegate"/> to handle the result of <see cref="getProfiles"/>.</param>
    /// <example>
    /// <para>
    /// <code>
    /// 	LGCoreLite.LGCoreLiteAPI instance = LGCoreLite.LGCoreLiteAPIFactory.getInstance();
    /// 	if( instance != null ) {
    /// 	    Debug.Log( "Get profiles" );
    /// 
    /// 	    StringList users = new StringList();
    /// 	    users.Add( "u12345" );
    /// 	    users.Add( "u67890" );
    /// 	    instance.getProfiles( users, (
    /// 	        bool                                isSuccess,
    /// 	        int                                 offset,
    /// 	        int                                 limit,
    /// 	        int                                 total,
    /// 	        LGCoreLite.UserProfileList          userProfileList,
    /// 	        LGCoreLite.Error                    error ) =>
    /// 	    {
    /// 	        Debug.Log( "LGCoreLite.LGCoreLiteAPI.getProfiles callback: " + isSuccess );
    /// 	        if( isSuccess ) {
    /// 	            Debug.Log( "[" + offset + ", " + limit + ", " + total + "]" );
    /// 	            Debug.Log( "user profile list: [\n" );
    /// 	            foreach( UserProfile profile in userProfileList ) {
    /// 	                Debug.Log( "\t{\n"
    /// 	                           + "\t\t" + profile.getUserId() + ",\n"
    /// 	                           + "\t\t" + profile.getDisplayName() + ",\n"
    /// 	                           + "\t\t" + profile.getPictureUrl() + ",\n"
    /// 	                           + "\t\t" + profile.getStatusMessage() + "\n"
    /// 	                           + "\t},\n" );
    /// 	            }
    /// 	            Debug.Log( "]" );
    /// 	        }
    /// 	        else {
    /// 	            Debug.Log( "Error[" + error.getCode() + "]: " + error.getMessage() );
    /// 	        }
    /// 	    } );
    /// 	}
    /// </code>
    /// </para>
    /// </example>
  public void getProfiles( StringList userIdList, GetUsersDelegate callback )
  {
    int contextId;
    lock( _callbacksLock ) {
        contextId = (_callbackContextId++);
        _pendingCallbacks.Add( contextId, callback );
    }

    getProfiles(
        userIdList,
        _getUsersCallback,
        new global::System.IntPtr(contextId)
    );
  }

    
    /// <summary>
    /// Get the complete list of friends who does not play the game.
    /// 
    /// </summary>
    /// <param name="callback"><see cref="GetUsersDelegate"/> to handle the result of <see cref="getGameFriends(int,int,GetUsersDelegate)"/>.</param>
    public void getNonGameFriends( GetUsersDelegate callback )
    {
      int contextId;
      lock( _callbacksLock ) {
          contextId = (_callbackContextId++);
          _pendingCallbacks.Add( contextId, callback );
      }

      getNonGameFriends(
          _getUsersCallback,
          new global::System.IntPtr(contextId)
      );
    }

    
    /// <summary>
    /// Delegate to handle the result of <see cref="getUserFriends(int,int,GetUsersDelegate)"/> or <see cref="getGameFriends(int,int,GetUsersDelegate)"/>.
    /// </summary>
    /// <remarks>
    /// User must complete login before <see cref="sendMessage(StringList,Message,SendMessageDelegate)"/>.
    /// <seealso cref="login"/>
    /// </remarks>
    /// <param name="isSuccess"><c>true</c> if <see cref="getUserFriends(int,int,GetUsersDelegate)"/> or <see cref="getGameFriends(int,int,GetUsersDelegate)"/> finished successfuly, otherwise <c>false</c>.</param>
    /// <param name="offset">The index of first friend fetched.</param>
    /// <param name="limit">The number of friends fetched.</param>
    /// <param name="total">The total number of LINE/game friends of current login user if <paramref name="isSuccess"/> is <c>false</c>, otherwise 0.</param>
    /// <param name="userProfileList">The list of friends' profile of current login user if <paramref name="isSuccess"/> is <c>true</c>, otherwise null.</param>
    /// <param name="error">Error occured during <see cref="getUserFriends(int,int,GetUsersDelegate)"/> or <see cref="getGameFriends(int,int,GetUsersDelegate)"/> if <paramref name="isSuccess"/> is <c>false</c>, otherwise null.</param>
  public delegate void GetUsersDelegate
  (
     bool                     isSuccess,
     int                      offset,
     int                      limit,
     int                      total,
     UserProfileList          userProfileList,
     Error                    error
  );

  internal delegate void GetUsersCallbackDelegate(
     bool                     isSuccess,
     int                      offset,
     int                      limit,
     int                      total,
     global::System.IntPtr    userProfileListPtr,
     global::System.IntPtr    errorPtr,
     global::System.IntPtr    context
  );
  [AOT.MonoPInvokeCallback (typeof (GetUsersCallbackDelegate))]
    static void _getUsersCallback(
       bool                     isSuccess,
       int                      offset,
       int                      limit,
       int                      total,
       global::System.IntPtr    userProfileListPtr,
       global::System.IntPtr    errorPtr,
       global::System.IntPtr    context
    )
    {
      UserProfileList userProfileList = (userProfileListPtr != global::System.IntPtr.Zero ? new UserProfileList( new UserProfileList(userProfileListPtr, false) ) : null);
      Error error = (errorPtr != global::System.IntPtr.Zero ? new Error( new Error(errorPtr, false) ) : null);
      int contextId = context.ToInt32();
      if( _pendingCallbacks.ContainsKey(contextId) ) {
          UnityEngine.Debug.Log( "getUsers callback about to invoke!" );
          try {
              GetUsersDelegate callback = (GetUsersDelegate)_pendingCallbacks[contextId];
              LGCoreLiteExt.Post( () => {
                      callback( isSuccess, offset, limit, total, userProfileList, error );

                      });
          }
          catch( System.Exception e ) {
              UnityEngine.Debug.Log( e.Message );
          }
          UnityEngine.Debug.Log( "getUsers callback finished invoking!" );
          _pendingCallbacks.Remove( contextId );
      }
    }

    
    /// <summary>
    /// Sends a LINE message from current login user to her/his designated friends.
    /// </summary>
    /// <remarks>
    /// User must complete <see cref="login"/> before <see cref="sendMessage(StringList,Message,SendMessageDelegate)"/>.
    /// <seealso cref="login"/>
    /// </remarks>
    /// <param name="userIdArray">The list of MIDs of the friends that the message will be sent to.</param>
    /// <param name="message">The message contents to be sent.</param>
    /// <param name="callback"><see cref="SendMessageDelegate"/> to handle the result of <see cref="sendMessage(StringList,Message,SendMessageDelegate)"/>.</param>
    /// <example>
    /// <para>
    /// <code>
    /// 	LGCoreLite.LGCoreLiteAPI instance = LGCoreLite.LGCoreLiteAPIFactory.getInstance();
    /// 	if( instance != null ) {
    /// 	    Debug.Log( "Sending Message..." );
    /// 	
    /// 	    LGCoreLite.StringList receivers = new LGCoreLite.StringList();
    /// 	    receivers.Add( "MID001" );
    /// 	    receivers.Add( "MID002" );
    /// 	    receivers.Add( "MID003" );
    /// 	
    /// 	    LGCoreLite.Message message = new LGCoreLite.Message();
    /// 	    message.setTemplateId( "TEMPLATE_ID_001" );
    /// 	    LGCoreLite.StringStringMap mainText = new LGCoreLite.StringStringMap();
    /// 	    mainText["title"] = "Test Message from LGCoreLite Sample Application";
    /// 	    mainText["owner"] = "LINE";
    /// 	    message.setMainText( mainText );
    /// 	
    /// 	    instance.sendMessage( receivers, message, (
    /// 	        bool             isSuccess,
    /// 	        Error            error ) =>
    /// 	    {
    /// 	        Debug.Log( "LGCoreLite.LGCoreLiteAPI.sendMessage callback: " + isSuccess );
    /// 	        if( ! isSuccess ) {
    /// 	            Debug.Log( "Error[" + error.getCode() + "]: " + error.getMessage() );
    /// 	        }
    /// 	    } );
    /// 	}
    /// </code>
    /// </para>
    /// </example>
  public void sendMessage(
    StringList          userIdArray,
    Message             message,
    SendMessageDelegate callback
  )
  {
    int contextId;
    lock( _callbacksLock ) {
        contextId = (_callbackContextId++);
        _pendingCallbacks.Add( contextId, callback );
    }

    sendMessage(
        userIdArray,
        message,
        _sendMessageCallback,
        new global::System.IntPtr(contextId)
    );
  }
    
    /// <summary>
    /// Delegate to handle the result of <see cref="sendMessage(StringList,Message,SendMessageDelegate)"/>.
    /// </summary>
    /// <param name="isSuccess"><c>true</c> if <see cref="sendMessage(StringList,Message,SendMessageDelegate)"/> finished successfuly, otherwise <c>false</c>.</param>
    /// <param name="error">Error occured during <see cref="sendMessage(StringList,Message,SendMessageDelegate)"/> if <paramref name="isSuccess"/> is <c>false</c>, otherwise null.</param>
  public delegate void SendMessageDelegate(
     bool             isSuccess,
     Error            error
  );

  internal delegate void SendMessageCallbackDelegate(
     bool                     isSuccess,
     global::System.IntPtr    errorPtr,
     global::System.IntPtr    context
  );
  [AOT.MonoPInvokeCallback (typeof (SendMessageCallbackDelegate))]
    static void _sendMessageCallback(
       bool                     isSuccess,
       global::System.IntPtr    errorPtr,
       global::System.IntPtr    context
    )
    {
      Error error = (errorPtr != global::System.IntPtr.Zero ? new Error( new Error(errorPtr, false) ) : null);
      int contextId = (context != global::System.IntPtr.Zero ? context.ToInt32() : 0);
      if( _pendingCallbacks.ContainsKey(contextId) ) {
          UnityEngine.Debug.Log( "sendMessage callback about to invoke!" );
          try {
              SendMessageDelegate callback = (SendMessageDelegate)_pendingCallbacks[contextId];
                      LGCoreLiteExt.Post( () => {
                          callback( isSuccess, error );

                      });

          }
          catch( System.Exception e ) {
              UnityEngine.Debug.Log( e.Message );
          }
          UnityEngine.Debug.Log( "sendMessage callback finished invoking!" );
          _pendingCallbacks.Remove( contextId );
      }
    }

  public delegate void IsAuthValidDeleagate(
     bool             isValid,
     Error            error
  );

    internal delegate void _IsAuthValidDeleagate(
              bool                     isValid,
              global::System.IntPtr    errorPtr,
              global::System.IntPtr    context
              );
          [AOT.MonoPInvokeCallback (typeof (_IsAuthValidDeleagate))]
          private static void _MyAuthValidDeleagate(
              bool                     isValid,
              global::System.IntPtr    errorPtr,
              global::System.IntPtr    context
              )
          {
              Error error = (errorPtr != global::System.IntPtr.Zero ? new Error( new Error(errorPtr, false) ) : null);
              int contextId = (context != global::System.IntPtr.Zero ? context.ToInt32() : 0);
              if( _pendingCallbacks.ContainsKey(contextId) ) {
                  UnityEngine.Debug.Log( "sendMessage callback about to invoke!" );
                  try {
                      IsAuthValidDeleagate callback = (IsAuthValidDeleagate)_pendingCallbacks[contextId];
                      LGCoreLiteExt.Post( () => {
                          callback( isValid, error );

                      });

                  }
                  catch( System.Exception e ) {
                      UnityEngine.Debug.Log( e.Message );
                  }
                  UnityEngine.Debug.Log( "sendMessage callback finished invoking!" );
                  _pendingCallbacks.Remove( contextId );
              }
          }


    
    /// <summary>
    /// Get the validity of current auth. Recommand to use it during login or resume phase.
    /// 
    /// </summary>
    /// <param name="isAuthValidDelegate">the callback which return boolean isValid as result of current authvalidity, Note the isValid is reliable only when error is null</param>
    /// <example>
    /// <para>
    /// <code>
    /// 	instance.isAuthValid(
    ///                    (bool                     isValid,
    ///                    Error                    error ) => 
    ///                    {
    ///                        if(error == null)
    ///                        {   LogDebug( "IsAuthValid: " + isValid );
    ///                            if(!isValid)
    ///                            {
    ///                                //go back welcome screen relogin
    ///                            }
    ///                        }
    ///                        else
    ///                        {
    ///                            LogDebug("call isAuthValid encountered unexpected error, don't relu on the isValid result");
    ///                        }
    ///                    });
    /// </code>
    /// </para>
    /// </example>
      public void isAuthValid( IsAuthValidDeleagate isAuthValidDelegate )
      {
              int contextId;
              lock( _callbacksLock ) {
                  contextId = (_callbackContextId++);
                  _pendingCallbacks.Add( contextId, isAuthValidDelegate );
              }

              isAuthValid(
                  _MyAuthValidDeleagate,
                  new global::System.IntPtr(contextId)
              );

      }

  private void setOnRetryLogin(global::LGCoreLite.LGCoreLiteAPI.onRetryLoginDelegate callback) {
    LGCoreLitePINVOKE.LGCoreLiteAPI_setOnRetryLogin(swigCPtr, callback);
  }

  private void setOnLoginResult(global::LGCoreLite.LGCoreLiteAPI.onLoginResultDelegate callback) {
    LGCoreLitePINVOKE.LGCoreLiteAPI_setOnLoginResult(swigCPtr, callback);
  }

    
    /// <summary>
    /// Gets the application identifier.
    /// </summary>
    /// <returns>The application identifier.</returns>
  public string getApplicationId() {
    string ret = LGCoreLitePINVOKE.LGCoreLiteAPI_getApplicationId(swigCPtr);
    return ret;
  }

  private LGCInitState initialize(string appId, LGCLogLevel logLevel, LGCPhase phase, int timeoutInterval) {
    LGCInitState ret = (LGCInitState)LGCoreLitePINVOKE.LGCoreLiteAPI_initialize(swigCPtr, appId, (int)logLevel, (int)phase, timeoutInterval);
    if (LGCoreLitePINVOKE.SWIGPendingException.Pending) throw LGCoreLitePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

        
    /// <summary>
    /// Enable NELO crash report, which automatically send crash report to NELO server. The function can only be called after init.
    /// 
    /// </summary>
  public void enableCrashReport() {
    LGCoreLitePINVOKE.LGCoreLiteAPI_enableCrashReport(swigCPtr);
  }


    /// <summary>
    /// Call <see cref="resume"/> when application resumed.
    /// </summary>
    /// <remarks>
    /// Below Android 4.0 Only.
    /// </remarks>
    /// <example>
    /// <para>
    /// <code>
    /// 	#if UNITY_ANDROID
    /// 	void OnApplicationPause( bool pauseStatus )
    /// 	{
    /// 	    LGCoreLite.LGCoreLiteAPI instance = LGCoreLite.LGCoreLiteAPIFactory.getInstance();
    /// 	    if( instance != null ) {
    /// 	        if (pauseStatus) {
    /// 	            Debug.Log ("applicationWillResignActive or onPause");
    /// 	            instance.pause( true );
    /// 	        } else {
    /// 	            Debug.Log ("applicationDidBecomeActive or onResume");
    /// 	            instance.resume();
    /// 	        }
    /// 	    }
    /// 	}
    /// 	#endif
    /// </code>
    /// </para>
    /// </example>
  public void resume() {
    LGCoreLitePINVOKE.LGCoreLiteAPI_resume(swigCPtr);
  }

    
    /// <summary>
    /// Call <see cref="pause(bool)"/> when application paused.
    /// </summary>
    /// <param name="isDestroy">If set to <c>true</c> is SCC of LGCoreLite will be stopped.</param>
    /// <remarks>
    /// Below Android 4.0 Only.
    /// </remarks>
    /// <example>
    /// <para>
    /// <code>
    /// 	#if UNITY_ANDROID
    /// 	void OnApplicationPause( bool pauseStatus )
    /// 	{
    /// 	    LGCoreLite.LGCoreLiteAPI instance = LGCoreLite.LGCoreLiteAPIFactory.getInstance();
    /// 	    if( instance != null ) {
    /// 	        if (pauseStatus) {
    /// 	            Debug.Log ("applicationWillResignActive or onPause");
    /// 	            instance.pause( true );
    /// 	        } else {
    /// 	            Debug.Log ("applicationDidBecomeActive or onResume");
    /// 	            instance.resume();
    /// 	        }
    /// 	    }
    /// 	}
    /// 	#endif
    /// </code>
    /// </para>
    /// </example>
  public void pause() {
    LGCoreLitePINVOKE.LGCoreLiteAPI_pause(swigCPtr);
  }

    
    /// <summary>
    /// Performs login.
    /// When <see cref="login"/> finished, <see cref="OnLoginResult"/> will be called with the login result or error.
    /// </summary>
    /// <remarks>
    /// <para>
    /// If the LINE App is installed, <see cref="login"/> will use the LINE App to login.
    /// </para>
    /// <para>
    /// If the LINE App is not installed, <see cref="login"/> performs operations necessary for Email Login. (The Email Login screen display logic is contained within the SDK.)
    /// </para>
    /// </remarks>
    /// <example>
    /// <para>
    /// <code>
    /// 	LGCoreLite.LGCoreLiteAPI instance = LGCoreLite.LGCoreLiteAPIFactory.getInstance();
    /// 	if( instance != null ) {
    /// 	    Debug.Log( "LGCoreLiteAPI starting login..." );
    /// 	    instance.login(LGCoreLite.LoginInfo.buildLineLoginInfo());
    /// 	}
    /// </code>
    /// </para>
    /// </example>
  public void login(LoginInfo info) {
    LGCoreLitePINVOKE.LGCoreLiteAPI_login(swigCPtr, LoginInfo.getCPtr(info));
    if (LGCoreLitePINVOKE.SWIGPendingException.Pending) throw LGCoreLitePINVOKE.SWIGPendingException.Retrieve();
  }

    
    /// <summary>
    /// Deletes the authorization information of current login user.
    /// </summary>
    /// <remarks>
    /// <para>
    /// Since this function deletes login information, it is necessary to login again after calling it.
    /// </para>
    /// <para>
    /// If you delete the login information for a LINE Login user and login again afterwards, the log in information is preserved, but the access token is updated.
    /// </para>
    /// </remarks>
    /// <example>
    /// <para>
    /// <code>
    /// 	LGCoreLite.LGCoreLiteAPI instance = LGCoreLite.LGCoreLiteAPIFactory.getInstance();
    /// 	if( instance != null ) {
    /// 	    Debug.Log( "Delete Auth Info" );
    /// 	    instance.deleteAuthInfo();
    /// 	}
    /// </code>
    /// </para>
    /// </example>
  public void deleteAuthInfo() {
    LGCoreLitePINVOKE.LGCoreLiteAPI_deleteAuthInfo(swigCPtr);
  }

  private void getUserProfile(global::LGCoreLite.LGCoreLiteAPI.GetUserProfileCallbackDelegate callback, global::System.IntPtr context) {
    LGCoreLitePINVOKE.LGCoreLiteAPI_getUserProfile(swigCPtr, callback, context);
  }

  private void getUserFriends(int offset, int limit, global::LGCoreLite.LGCoreLiteAPI.GetUsersCallbackDelegate callback, global::System.IntPtr context) {
    LGCoreLitePINVOKE.LGCoreLiteAPI_getUserFriends(swigCPtr, offset, limit, callback, context);
  }

  private void getGameFriends(int offset, int limit, global::LGCoreLite.LGCoreLiteAPI.GetUsersCallbackDelegate callback, global::System.IntPtr context) {
    LGCoreLitePINVOKE.LGCoreLiteAPI_getGameFriends(swigCPtr, offset, limit, callback, context);
  }

  private void getProfiles(StringList userIdList, global::LGCoreLite.LGCoreLiteAPI.GetUsersCallbackDelegate callback, global::System.IntPtr context) {
    LGCoreLitePINVOKE.LGCoreLiteAPI_getProfiles(swigCPtr, StringList.getCPtr(userIdList), callback, context);
    if (LGCoreLitePINVOKE.SWIGPendingException.Pending) throw LGCoreLitePINVOKE.SWIGPendingException.Retrieve();
  }

  private void sendMessage(StringList userIdList, Message message, global::LGCoreLite.LGCoreLiteAPI.SendMessageCallbackDelegate callback, global::System.IntPtr context) {
    LGCoreLitePINVOKE.LGCoreLiteAPI_sendMessage(swigCPtr, StringList.getCPtr(userIdList), Message.getCPtr(message), callback, context);
    if (LGCoreLitePINVOKE.SWIGPendingException.Pending) throw LGCoreLitePINVOKE.SWIGPendingException.Retrieve();
  }

  private void isAuthValid(global::LGCoreLite.LGCoreLiteAPI._IsAuthValidDeleagate authValidCB, global::System.IntPtr context) {
    LGCoreLitePINVOKE.LGCoreLiteAPI_isAuthValid__SWIG_0(swigCPtr, authValidCB, context);
  }

  private void isAuthValid(IsAuthValidListener authValidCB) {
    LGCoreLitePINVOKE.LGCoreLiteAPI_isAuthValid__SWIG_1(swigCPtr, IsAuthValidListener.getCPtr(authValidCB));
    if (LGCoreLitePINVOKE.SWIGPendingException.Pending) throw LGCoreLitePINVOKE.SWIGPendingException.Retrieve();
  }

  private void getNonGameFriends(global::LGCoreLite.LGCoreLiteAPI.GetUsersCallbackDelegate callback, global::System.IntPtr context) {
    LGCoreLitePINVOKE.LGCoreLiteAPI_getNonGameFriends(swigCPtr, callback, context);
  }

}

}
