//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------

namespace LGCoreLite {

/// <summary>
/// <c>LGCoreLiteAPIFactory</c> is factory class of <see cref="LGCoreLite.LGCoreLiteAPI"/>.
/// </summary>
public class LGCoreLiteAPIFactory : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal LGCoreLiteAPIFactory(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(LGCoreLiteAPIFactory obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  /// <summary>
  /// Releases all resource used by the <see cref="LGCoreLite.LGCoreLiteAPIFactory"/> object.
  /// </summary>
  /// <remarks>Call <see cref="Dispose"/> when you are finished using the <see cref="LGCoreLite.LGCoreLiteAPIFactory"/>. The
  /// <see cref="Dispose"/> method leaves the <see cref="LGCoreLite.LGCoreLiteAPIFactory"/> in an unusable state. After
  /// calling <see cref="Dispose"/>, you must release all references to the
  /// <see cref="LGCoreLite.LGCoreLiteAPIFactory"/> so the garbage collector can reclaim the memory that the
  /// <see cref="LGCoreLite.LGCoreLiteAPIFactory"/> was occupying.</remarks>
  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          throw new global::System.MethodAccessException("C++ destructor does not have public access");
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  /// <summary>
  /// Creates a new instance of <see cref="LGCoreLite.LGCoreLiteAPI"/> if the singleton instance is null, and returns the singleton instance.
  /// </summary>
  /// <returns>The singleton instance of <see cref="LGCoreLite.LGCoreLiteAPI"/>.</returns>
  public static LGCoreLiteAPI createInstance() {
    global::System.IntPtr cPtr = LGCoreLitePINVOKE.LGCoreLiteAPIFactory_createInstance();
    LGCoreLiteAPI ret = (cPtr == global::System.IntPtr.Zero) ? null : new LGCoreLiteAPI(cPtr, false);
    return ret;
  }

  /// <summary>
  /// Gets the singleton instance of <see cref="LGCoreLite.LGCoreLiteAPI"/>.
  /// </summary>
  /// <returns>The singleton instance of <see cref="LGCoreLite.LGCoreLiteAPI"/>.</returns>
  public static LGCoreLiteAPI getInstance() {
    global::System.IntPtr cPtr = LGCoreLitePINVOKE.LGCoreLiteAPIFactory_getInstance();
    LGCoreLiteAPI ret = (cPtr == global::System.IntPtr.Zero) ? null : new LGCoreLiteAPI(cPtr, false);
    return ret;
  }

  /// <summary>
  /// Destroys the singleton instance of <see cref="LGCoreLite.LGCoreLiteAPI"/>.
  /// </summary>
  /// <remarks>
  /// After <see cref="destroyInstance"/> called, because the singleton instance of native handle has been destroyed, all existing <see cref="LGCoreLite.LGCoreLiteAPI"/> instances cannot be used anymore and should be <see cref="LGCoreLite.LGCoreLiteAPI.Dispose"/>.
  /// </remarks>
  public static void destroyInstance() {
    LGCoreLitePINVOKE.LGCoreLiteAPIFactory_destroyInstance();
  }

}

}
